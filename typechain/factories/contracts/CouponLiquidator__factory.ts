/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CouponLiquidator,
  CouponLiquidatorInterface,
} from "../../contracts/CouponLiquidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "loanPositionManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "CollateralSwapFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "swapData",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
    ],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "positionLockAcquired",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051620014c4380380620014c48339810160408190526100319161006a565b6001600160a01b0392831660805290821660a0521660c0526100ad565b80516001600160a01b038116811461006557600080fd5b919050565b60008060006060848603121561007f57600080fd5b6100888461004e565b92506100966020850161004e565b91506100a46040850161004e565b90509250925092565b60805160a05160c0516113b0620001146000396000818161039801526103d10152600081816109cc01528181610a4e0152610b2401526000818160b60152818161018b01528181610258015281816105640152818161062601526106f901526113b06000f3fe60806040526004361061002d5760003560e01c806346a114e214610039578063a44a70fa1461006f57600080fd5b3661003457005b600080fd5b34801561004557600080fd5b50610059610054366004610faa565b610091565b604051610066919061102f565b60405180910390f35b34801561007b57600080fd5b5061008f61008a366004611061565b6106cc565b005b60606000806000848060200190518101906100ac9190611109565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eb02c301856040518263ffffffff1660e01b815260040161010291815260200190565b60e060405180830381865afa15801561011f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610143919061118b565b6040517fd296d1f10000000000000000000000000000000000000000000000000000000081526004810186905260248101859052909150600090819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d296d1f1906044016060604051808303816000875af11580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f89190611221565b91945092509050600061020b828561124f565b60608601516040517f01e336670000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018390529192507f000000000000000000000000000000000000000000000000000000000000000016906301e3366790606401600060405180830381600087803b15801561029c57600080fd5b505af11580156102b0573d6000803e3d6000fd5b505050506102c28560600151306108bb565b600085606001516001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032a9190611276565b9050600086608001516001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190611276565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610444577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b50505050505b61044f828a8a6109b5565b608087015160405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529082169063095ea7b3906044016020604051808303816000875af11580156104a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c89190611293565b5060808701516040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018790523060248201526001600160a01b03909116906394bf804d90604401600060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b50505050608087015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018890529091169063095ea7b3906044016020604051808303816000875af11580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e19190611293565b5060808701516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b15801561066c57600080fd5b505af1158015610680573d6000803e3d6000fd5b5050505081816040516020016106ac9291906001600160a01b0392831681529116602082015260400190565b6040516020818303038152906040529a5050505050505050505050919050565b60008484846040516020016106e3939291906112ae565b60405160208183030381529060405290506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381548319846040518263ffffffff1660e01b8152600401610743919061102f565b6000604051808303816000875af1158015610762573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078a91908101906112d6565b80602001905181019061079d919061130b565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d9190611345565b90508015610829576108296001600160a01b0384168683610ba8565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108949190611345565b905080156108b0576108b06001600160a01b0384168783610ba8565b505050505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190611345565b90508060000361093557505050565b6040517ffcd3533c000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b15801561099857600080fd5b505af11580156109ac573d6000803e3d6000fd5b50505050505050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905284169063095ea7b3906044016020604051808303816000875af1158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190611293565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683604051610a84919061135e565b6000604051808303816000865af19150503d8060008114610ac1576040519150601f19603f3d011682016040523d82523d6000602084013e610ac6565b606091505b509150915081610b0d57806040517feff88414000000000000000000000000000000000000000000000000000000008152600401610b04919061102f565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000602483015286169063095ea7b3906044016020604051808303816000875af1158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190611293565b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610c28908490610c2d565b505050565b6000610c82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d159092919063ffffffff16565b9050805160001480610ca3575080806020019051810190610ca39190611293565b610c285760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b04565b6060610d248484600085610d2c565b949350505050565b606082471015610da45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b04565b600080866001600160a01b03168587604051610dc0919061135e565b60006040518083038185875af1925050503d8060008114610dfd576040519150601f19603f3d011682016040523d82523d6000602084013e610e02565b606091505b5091509150610e1387838387610e1e565b979650505050505050565b60608315610e8d578251600003610e86576001600160a01b0385163b610e865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b04565b5081610d24565b610d248383815115610ea25781518083602001fd5b8060405162461bcd60e51b8152600401610b04919061102f565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715610ef557610ef5610ebc565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f2457610f24610ebc565b604052919050565b600067ffffffffffffffff821115610f4657610f46610ebc565b50601f01601f191660200190565b600082601f830112610f6557600080fd5b8135610f78610f7382610f2c565b610efb565b818152846020838601011115610f8d57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610fbc57600080fd5b813567ffffffffffffffff811115610fd357600080fd5b610d2484828501610f54565b60005b83811015610ffa578181015183820152602001610fe2565b50506000910152565b6000815180845261101b816020860160208601610fdf565b601f01601f19169290920160200192915050565b6020815260006110426020830184611003565b9392505050565b6001600160a01b038116811461105e57600080fd5b50565b6000806000806080858703121561107757600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561109c57600080fd5b6110a887828801610f54565b92505060608501356110b981611049565b939692955090935050565b600082601f8301126110d557600080fd5b81516110e3610f7382610f2c565b8181528460208386010111156110f857600080fd5b610d24826020830160208701610fdf565b60008060006060848603121561111e57600080fd5b8351925060208401519150604084015167ffffffffffffffff81111561114357600080fd5b61114f868287016110c4565b9150509250925092565b805161ffff8116811461116b57600080fd5b919050565b8051801515811461116b57600080fd5b805161116b81611049565b600060e0828403121561119d57600080fd5b6111a5610ed2565b825167ffffffffffffffff811681146111bd57600080fd5b81526111cb60208401611159565b60208201526111dc60408401611170565b60408201526111ed60608401611180565b60608201526111fe60808401611180565b608082015260a083015160a082015260c083015160c08201528091505092915050565b60008060006060848603121561123657600080fd5b8351925060208401519150604084015190509250925092565b8181038181111561127057634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561128857600080fd5b815161104281611049565b6000602082840312156112a557600080fd5b61104282611170565b8381528260208201526060604082015260006112cd6060830184611003565b95945050505050565b6000602082840312156112e857600080fd5b815167ffffffffffffffff8111156112ff57600080fd5b610d24848285016110c4565b6000806040838503121561131e57600080fd5b825161132981611049565b602084015190925061133a81611049565b809150509250929050565b60006020828403121561135757600080fd5b5051919050565b60008251611370818460208701610fdf565b919091019291505056fea2646970667358221220a1218a28b084491f7f955630d7b9a9e3e4ffeca44e46f88ad9998a84c126a71e64736f6c63430008130033";

type CouponLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CouponLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CouponLiquidator__factory extends ContractFactory {
  constructor(...args: CouponLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    loanPositionManager: PromiseOrValue<string>,
    router: PromiseOrValue<string>,
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CouponLiquidator> {
    return super.deploy(
      loanPositionManager,
      router,
      weth,
      overrides || {}
    ) as Promise<CouponLiquidator>;
  }
  override getDeployTransaction(
    loanPositionManager: PromiseOrValue<string>,
    router: PromiseOrValue<string>,
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      loanPositionManager,
      router,
      weth,
      overrides || {}
    );
  }
  override attach(address: string): CouponLiquidator {
    return super.attach(address) as CouponLiquidator;
  }
  override connect(signer: Signer): CouponLiquidator__factory {
    return super.connect(signer) as CouponLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CouponLiquidatorInterface {
    return new utils.Interface(_abi) as CouponLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CouponLiquidator {
    return new Contract(address, _abi, signerOrProvider) as CouponLiquidator;
  }
}
