/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IController {
  export type PermitSignatureStruct = {
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type PermitSignatureStructOutput = [
    BigNumber,
    number,
    string,
    string
  ] & { deadline: BigNumber; v: number; r: string; s: string };
}

export interface IRepayAdapterInterface extends utils.Interface {
  functions: {
    "repayWithCollateral(uint256,uint256,uint256,bytes,(uint256,uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "repayWithCollateral"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "repayWithCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IController.PermitSignatureStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "repayWithCollateral",
    data: BytesLike
  ): Result;

  events: {
    "SetCouponMarket(address,uint16,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetCouponMarket"): EventFragment;
}

export interface SetCouponMarketEventObject {
  asset: string;
  epoch: number;
  cloberMarket: string;
}
export type SetCouponMarketEvent = TypedEvent<
  [string, number, string],
  SetCouponMarketEventObject
>;

export type SetCouponMarketEventFilter = TypedEventFilter<SetCouponMarketEvent>;

export interface IRepayAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRepayAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      sellCollateralAmount: PromiseOrValue<BigNumberish>,
      minRepayAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      positionPermitParams: IController.PermitSignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  repayWithCollateral(
    positionId: PromiseOrValue<BigNumberish>,
    sellCollateralAmount: PromiseOrValue<BigNumberish>,
    minRepayAmount: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    positionPermitParams: IController.PermitSignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      sellCollateralAmount: PromiseOrValue<BigNumberish>,
      minRepayAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      positionPermitParams: IController.PermitSignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetCouponMarket(address,uint16,address)"(
      asset?: PromiseOrValue<string> | null,
      epoch?: PromiseOrValue<BigNumberish> | null,
      cloberMarket?: PromiseOrValue<string> | null
    ): SetCouponMarketEventFilter;
    SetCouponMarket(
      asset?: PromiseOrValue<string> | null,
      epoch?: PromiseOrValue<BigNumberish> | null,
      cloberMarket?: PromiseOrValue<string> | null
    ): SetCouponMarketEventFilter;
  };

  estimateGas: {
    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      sellCollateralAmount: PromiseOrValue<BigNumberish>,
      minRepayAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      positionPermitParams: IController.PermitSignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      sellCollateralAmount: PromiseOrValue<BigNumberish>,
      minRepayAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      positionPermitParams: IController.PermitSignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
