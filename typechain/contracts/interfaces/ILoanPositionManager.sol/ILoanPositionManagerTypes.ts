/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILoanPositionManagerTypesInterface extends utils.Interface {
  functions: {};

  events: {
    "AssetRegistered(address)": EventFragment;
    "PositionLiquidated(uint256)": EventFragment;
    "PositionUpdated(uint256,uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
}

export interface AssetRegisteredEventObject {
  asset: string;
}
export type AssetRegisteredEvent = TypedEvent<
  [string],
  AssetRegisteredEventObject
>;

export type AssetRegisteredEventFilter = TypedEventFilter<AssetRegisteredEvent>;

export interface PositionLiquidatedEventObject {
  positionId: BigNumber;
}
export type PositionLiquidatedEvent = TypedEvent<
  [BigNumber],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface PositionUpdatedEventObject {
  positionId: BigNumber;
  collateralAmount: BigNumber;
  debtAmount: BigNumber;
  unlockedAt: number;
}
export type PositionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  PositionUpdatedEventObject
>;

export type PositionUpdatedEventFilter = TypedEventFilter<PositionUpdatedEvent>;

export interface ILoanPositionManagerTypes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILoanPositionManagerTypesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AssetRegistered(address)"(
      asset?: PromiseOrValue<string> | null
    ): AssetRegisteredEventFilter;
    AssetRegistered(
      asset?: PromiseOrValue<string> | null
    ): AssetRegisteredEventFilter;

    "PositionLiquidated(uint256)"(
      positionId?: PromiseOrValue<BigNumberish> | null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      positionId?: PromiseOrValue<BigNumberish> | null
    ): PositionLiquidatedEventFilter;

    "PositionUpdated(uint256,uint256,uint256,uint8)"(
      positionId?: PromiseOrValue<BigNumberish> | null,
      collateralAmount?: null,
      debtAmount?: null,
      unlockedAt?: null
    ): PositionUpdatedEventFilter;
    PositionUpdated(
      positionId?: PromiseOrValue<BigNumberish> | null,
      collateralAmount?: null,
      debtAmount?: null,
      unlockedAt?: null
    ): PositionUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
