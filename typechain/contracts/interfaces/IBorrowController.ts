/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PermitParamsStruct = {
  deadline: PromiseOrValue<BigNumberish>;
  v: PromiseOrValue<BigNumberish>;
  r: PromiseOrValue<BytesLike>;
  s: PromiseOrValue<BytesLike>;
};

export type PermitParamsStructOutput = [BigNumber, number, string, string] & {
  deadline: BigNumber;
  v: number;
  r: string;
  s: string;
};

export declare namespace IBorrowController {
  export type SwapDataStruct = {
    swap: PromiseOrValue<string>;
    inAmount: PromiseOrValue<BigNumberish>;
    minOutAmount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type SwapDataStructOutput = [string, BigNumber, BigNumber, string] & {
    swap: string;
    inAmount: BigNumber;
    minOutAmount: BigNumber;
    data: string;
  };
}

export interface IBorrowControllerInterface extends utils.Interface {
  functions: {
    "addCollateral(uint256,uint256,(uint256,uint8,bytes32,bytes32),(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "borrow(address,address,uint256,uint256,uint256,uint8,(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "borrowMore(uint256,uint256,uint256,(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "extendLoanDuration(uint256,uint8,uint256,(uint256,uint8,bytes32,bytes32),(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "removeCollateral(uint256,uint256,(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "repay(uint256,uint256,uint256,(uint256,uint8,bytes32,bytes32),(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "repayWithCollateral(uint256,uint256,(address,uint256,uint256,bytes),(uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "shortenLoanDuration(uint256,uint8,uint256,(uint256,uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateral"
      | "borrow"
      | "borrowMore"
      | "extendLoanDuration"
      | "removeCollateral"
      | "repay"
      | "repayWithCollateral"
      | "shortenLoanDuration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PermitParamsStruct,
      PermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowMore",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extendLoanDuration",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PermitParamsStruct,
      PermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PermitParamsStruct,
      PermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IBorrowController.SwapDataStruct,
      PermitParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "shortenLoanDuration",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PermitParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowMore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendLoanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayWithCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortenLoanDuration",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBorrowController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBorrowControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      collateralPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrow(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      loanEpochs: PromiseOrValue<BigNumberish>,
      collateralPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowMore(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      maxDebtAmount: PromiseOrValue<BigNumberish>,
      swapData: IBorrowController.SwapDataStruct,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shortenLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateral(
    positionId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    positionPermitParams: PermitParamsStruct,
    collateralPermitParams: PermitParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrow(
    collateralToken: PromiseOrValue<string>,
    debtToken: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    maxPayInterest: PromiseOrValue<BigNumberish>,
    loanEpochs: PromiseOrValue<BigNumberish>,
    collateralPermitParams: PermitParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowMore(
    positionId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    maxPayInterest: PromiseOrValue<BigNumberish>,
    positionPermitParams: PermitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendLoanDuration(
    positionId: PromiseOrValue<BigNumberish>,
    epochs: PromiseOrValue<BigNumberish>,
    maxPayInterest: PromiseOrValue<BigNumberish>,
    positionPermitParams: PermitParamsStruct,
    debtPermitParams: PermitParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    positionId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    positionPermitParams: PermitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    positionId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    minEarnInterest: PromiseOrValue<BigNumberish>,
    positionPermitParams: PermitParamsStruct,
    debtPermitParams: PermitParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayWithCollateral(
    positionId: PromiseOrValue<BigNumberish>,
    maxDebtAmount: PromiseOrValue<BigNumberish>,
    swapData: IBorrowController.SwapDataStruct,
    positionPermitParams: PermitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shortenLoanDuration(
    positionId: PromiseOrValue<BigNumberish>,
    epochs: PromiseOrValue<BigNumberish>,
    minEarnInterest: PromiseOrValue<BigNumberish>,
    positionPermitParams: PermitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      collateralPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      loanEpochs: PromiseOrValue<BigNumberish>,
      collateralPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowMore(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    extendLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      maxDebtAmount: PromiseOrValue<BigNumberish>,
      swapData: IBorrowController.SwapDataStruct,
      positionPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    shortenLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      collateralPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrow(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      loanEpochs: PromiseOrValue<BigNumberish>,
      collateralPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowMore(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      maxDebtAmount: PromiseOrValue<BigNumberish>,
      swapData: IBorrowController.SwapDataStruct,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shortenLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      collateralPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      collateralToken: PromiseOrValue<string>,
      debtToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      loanEpochs: PromiseOrValue<BigNumberish>,
      collateralPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowMore(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      maxPayInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      debtPermitParams: PermitParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayWithCollateral(
      positionId: PromiseOrValue<BigNumberish>,
      maxDebtAmount: PromiseOrValue<BigNumberish>,
      swapData: IBorrowController.SwapDataStruct,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shortenLoanDuration(
      positionId: PromiseOrValue<BigNumberish>,
      epochs: PromiseOrValue<BigNumberish>,
      minEarnInterest: PromiseOrValue<BigNumberish>,
      positionPermitParams: PermitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
